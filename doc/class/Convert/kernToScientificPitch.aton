@@BEGIN:	FunctionDocumentation
@INDEXED:	yes
@CLASSNAME:	Convert
@METHOD:	kernToScientificPitch
@ACCESS:	public
@RETURN:	static string  
@RETURN:	return 
@RETURN:	return 
@PARAMETERS:	const string& kerndata, string flat = "b", string sharp = "#", string separator = ""
@PARAMETERS:	kerndata, flat, sharp, separator
@PARAMETERS:	kerndata, flat, sharp, separator
@FILE:		Convert-pitch.cpp
@LINES:		23-63
@SHORTDESC:	Convert a **kern pitch to ScientificPitch notation, which is the diatonic letter name, followed by a possible accidental, then an optional separator string, and finally the octave number.
@LONGDESC:	Convert a **kern pitch to
	ScientificPitch notation, which is the diatonic letter name,
	followed by a possible accidental, then an optional separator
	string, and finally the octave number.  A string representing a
	chord can be given to this function, and the output will return
	a list of the pitches in the chord, separated by a space.
	default values:
	flat      = "b"
	sharp     = "#"
	separator = ""
	

@@BEGIN: EXAMPLE
@DESCRIPTION:
@CODE:
@OUTPUT:
@@END:	EXAMPLE

@SRCCODE:

string Convert::kernToScientificPitch(const string& kerndata,
		string flat, string sharp, string separator) {
	vector<string> subtokens = Convert::splitString(kerndata);
	string output;
	char   diatonic;
	int    accidental;
	int    octave;

	for (int i=0; i<subtokens.size(); i++) {
		diatonic   = Convert::kernToDiatonicUC(subtokens[i]);
		accidental = Convert::kernToAccidentalCount(subtokens[i]);
		octave     = Convert::kernToOctaveNumber(subtokens[i]);
		if ((i > 0) && (i < subtokens.size()-1)) {
			output += " ";
		}
		output += diatonic;
		for (int j=0; j<abs(accidental); j++) {
			output += (accidental < 0 ? flat : sharp);
		}
		output += separator;
		output += to_string(octave);
	}

	return output;
}


@@END:	FunctionDocumentation

