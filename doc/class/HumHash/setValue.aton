@@BEGIN:	FunctionDocumentation
@INDEXED:	yes
@CLASSNAME:	HumHash
@METHOD:	setValue
@ACCESS:	public
@RETURN:	void           
@RETURN:	void           
@RETURN:	void           
@RETURN:	void           
@RETURN:	void           
@RETURN:	void           
@RETURN:	void           
@RETURN:	void           
@RETURN:	void           
@RETURN:	void           
@RETURN:	void           
@RETURN:	void           
@PARAMETERS:	const string& key, const string& value
@PARAMETERS:	const string& ns2, const string& key, const string& value
@PARAMETERS:	const string& ns1, const string& ns2, const string& key, const string& value
@PARAMETERS:	const string& key, int value
@PARAMETERS:	const string& ns2, const string& key, int value
@PARAMETERS:	const string& ns1, const string& ns2, const string& key, int value
@PARAMETERS:	const string& key, HumNum value
@PARAMETERS:	const string& ns2, const string& key, HumNum value
@PARAMETERS:	const string& ns1, const string& ns2, const string& key, HumNum value
@PARAMETERS:	const string& key, double value
@PARAMETERS:	const string& ns2, const string& key, double value
@PARAMETERS:	const string& ns1, const string& ns2, const string& key, double value
@FILE:		HumHash.cpp
@LINES:		406-429
@SHORTDESC:	Set the parameter to the given value, over-writing any previous value for the parameter.
@LONGDESC:	Set the parameter to the given value,
	over-writing any previous value for the parameter.  The
	value is any arbitrary string, but preferably does not
	include tabs or colons.  If a colon is needed, then specify
	as "&colon;" without the quotes.  Values such as integers
	fractions and floats can be specified, and these wil be converted
	internally into strings (use getValueInt() or getValueFloat()
	to recover the original type).
	

@@BEGIN: EXAMPLE
@DESCRIPTION:
@CODE:
@OUTPUT:
@@END:	EXAMPLE

@SRCCODE:

void HumHash::setValue(const string& key, const string& value) {
	vector<string> keys = getKeyList(key);
	if (keys.size() == 1) {
		setValue("", "", keys[0], value);
	} else if (keys.size() == 2) {
		setValue("", keys[0], keys[1], value);
	} else {
		setValue(keys[0], keys[1], keys[2], value);
	}
}


@@END:	FunctionDocumentation

