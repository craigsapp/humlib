{"name":"Minhumdrum","tagline":"Minimal generalized Humdrum data parsing library in C++","body":"minHumdrum\r\n==========\r\n\r\nThe minHumdrum library is a set of C++ classes for parsing \r\n[Humdrum](http://www.humdrum.org) file data.  The library is designed\r\nto be portable, consisting of two files that can be copied into\r\nyour project:\r\n\r\n1. An include file [minhumdrum.h](/include/minhumdrum.h)\r\n2. and a source file [minhumdrum.cpp](/src/minhumdrum.h)\r\n\r\nThe classes use some C++11-specific features, so you must add the\r\n`-stc=c++11` option when compiling with GNU g++ or clang++ compiler.\r\nAlso include the `-stdlib=libc++` when compiling with clang.  See the\r\n[Makefile](https://github.com/craigsapp/minHumdrum/Makefile) for compiling the library and \r\n[Makefile.examples](https://github.com/craigsapp/minHumdrum/Makefile.examples) for linking to create executables.\r\n\r\nMore information and documentation for the library can be found at http://min.humdrum.org.\r\n\r\nClass overview\r\n==============\r\n\r\nHere are the classes defined in the minHumdrum library:\r\n\r\n* [HumdrumToken](https://github.com/craigsapp/minHumdrum/blob/master/include/HumdrumToken.h): manages tokens (data elements on a line) for HumdrumLine.\r\n* [HumdrumLine](https://github.com/craigsapp/minHumdrum/blob/master/include/HumdrumLine.h): manages the content of a line (data record) in a Humdrum file.\r\n* [HumdrumFile](https://github.com/craigsapp/minHumdrum/blob/master/include/HumdrumFile.h): primary interface for working with Humdrum file data.\r\n* [HumdrumFileContent](https://github.com/craigsapp/minHumdrum/blob/master/include/HumdrumFileContent.h): manages analysis of data content (particularly of **kern data) beyond basic rhythmic analysis done in HumdrumFileStructure.\r\n* [HumdrumFileStructure](https://github.com/craigsapp/minHumdrum/blob/master/include/HumdrumFileStructure.h): manages rhythmic analysis of the data and extra parameters for data tokens.\r\n* [HumdrumFileBase](https://github.com/craigsapp/minHumdrum/blob/master/include/HumdrumFileBase.h): manages data storage and reading/writing of Humdrum file data.\r\n* [Convert](https://github.com/craigsapp/minHumdrum/blob/master/include/Convert.h): utility functions for converting data (particularly from token strings) into other formats.\r\n\r\nCompiling\r\n==========\r\n\r\nIf you download the git repository or a zip/tarball of the repository, you can\r\ncompile the library with the command\r\n```bash\r\nmake\r\n```\r\nThis should create the file `lib/libminhumdrum.a`, which can be used to\r\nlink to other program code.\r\n\r\nFor testing purposes, another form of the library can be compiled from the individual source files for each class:\r\n```bash\r\nmake lib\r\n```\r\nThis will create the file `lib/libhumdrum.a`.\r\n\r\n\r\nExample\r\n========\r\n\r\nHere is an example program that uses the minHumdrum library to convert a Humdrum file into a MIDI-like listing of notes in the Humdrum score:\r\n\r\n\r\n```cpp\r\n#include \"minhumdrum.h\"\r\n\r\nusing namespace std;\r\nusing namespace minHumdrum;\r\n\r\nvoid printNoteInformation(HumdrumFile& infile, int line, \r\n      int field, int tpq);\r\n\r\nint main(int argc, char** argv) {\r\n   if (argc != 2) {\r\n      return 1;\r\n   }\r\n   HumdrumFile infile;\r\n   if (!infile.read(argv[1])) {\r\n      return 1;\r\n   }\r\n   int tpq = infile.tpq();\r\n   cout << \"TPQ: \" << tpq << endl;\r\n   cout << \"PITCH\\tSTART\\tDURATION\" << endl;\r\n\r\n   for (int i=0; i<infile.getLineCount(); i++) {\r\n      if (!infile[i].isData()) {\r\n         continue;\r\n      }\r\n      for (int j=0; j<infile[i].getTokenCount(); j++) {\r\n         if (infile[i].token(j).isNull()) {\r\n            continue;\r\n         }\r\n         if (infile[i].token(j).isDataType(\"kern\")) {\r\n            printNoteInformation(infile, i, j, tpq);\r\n         }\r\n      }\r\n   }\r\n   return 0;\r\n}\r\n\r\nvoid printNoteInformation(HumdrumFile& infile, int line, \r\n      int field, int tpq) {\r\n   int starttime, duration;\r\n   HumNum value;\r\n\r\n   value = infile[line].getDurationFromStart();\r\n   value *= tpq;\r\n   starttime = value.getNumerator();\r\n\r\n   value = infile[line].token(field).getDuration();\r\n   value *= tpq;\r\n   duration = value.getNumerator();\r\n\r\n   cout << Convert::kernToScientificPitch(infile[line].token(field))\r\n        << '\\t' << starttime << '\\t' << duration << endl;\r\n}\r\n```\r\n\r\nNotice that all minHumdrum code is placed into the minHumdrum namespace.\r\n\r\nTest data for use with the above program:\r\n\r\n![Example music](https://cdn.rawgit.com/craigsapp/minHumdrum/master/examples/hum2notelist.svg)\r\n\r\n<table style=\"border-collapse: separate; margin-left:auto; margin-right:auto\">\r\n<tr><td style=\"border:0\">\r\nExample input:<br>\r\n<pre style=\"tab-stop: 12; font-family: Courier; text-align:left\">\r\n**kern  **kern\r\n*M3/4   *M3/4\r\n8C      12d\r\n.       12e\r\n8B      .\r\n.       12f\r\n4A      2g\r\n4G      .\r\n=       =\r\n*-      *-\r\n</pre>\r\n</td><td style=\"border:0\">\r\nExample output:<br>\r\n<pre style=\"font-family: Courier; text-align:left\">\r\nTPQ: 6\r\nPITCH   START   DURATION\r\nC3      0       3\r\nD4      0       2\r\nE4      2       2\r\nB3      3       3\r\nF4      4       2\r\nA3      6       6\r\nG4      6       12\r\nG3      12      6\r\n</pre>\r\n</td></tr></table>\r\n</center>\r\n\r\nIf you are using the minHumdrum project directory, you can place\r\nprograms into a subdirectory called `myprograms` and then to compile,\r\ngo to the base directory of the minHumdrum code and type `make myprogram`\r\nif the program is called `myprograms/myprogram.cpp`.  The compiled program\r\nwill be created as `bin/myprogram`.\r\n\r\nDownloading\r\n===========\r\n\r\nTo download using git, type:\r\n```bash\r\ngit clone https://github.com/craigsapp/minHumdrum\r\n```\r\nTo update to the most recent version of minHumdrum, type in the minHumdrum directory:\r\n```bash\r\ngit pull\r\n```\r\n\r\n\r\n\r\n","google":"UA-66501284-1","note":"Don't delete this file! It's used internally to help with page regeneration."}